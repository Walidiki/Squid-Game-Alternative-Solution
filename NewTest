import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;
public class NewTest 
{
	public static void main(String[] args) throws FileNotFoundException
	{
		Scanner inp = new Scanner(System.in);
		System.out.println("Enter number of lines: ");
		int x = inp.nextInt();
		System.out.println("Enter number of players (must be equal to or greater than number of lines): ");
	    int n = inp.nextInt();
	    inp.close();
	    FileOutputStream out = new FileOutputStream("SquidGameTest " + x + "-" + n + ".txt");
		PrintStream ps = new PrintStream(out);
		ps.print("x = " + x + "\nn = " + n +"\n==========");
	    int solutions = StudentSolver(x, n, ps);
	    System.out.println("s = " + solutions);
	}
	public static int StudentSolver(int x, int n, PrintStream ps) throws FileNotFoundException
	{
		
		if (x == 0 || n == 0)
		{
			return 0;
		}
		if (x == n)
		{
			// System.out.println("Same number of players as queues");
			return 1;
		}
		else if (x > n)
		{
			return 0;
		}
		NewGraph NG = new NewGraph(ps);
		ArrayList<ArrayList<Integer>> partition = interpret(partition(n - x));
		ArrayList<ArrayList<Integer>> vertices = cartographer(n, x, NG);
		vertices = _arrangements(n - x, vertices, n, x, NG, ps);
		NG.findNetworks();
		ps.println("===================================================================");
		ps.println("Neighbors/Edges: ");
		NG.displayNetworks();
		ps.println("==================================================================================");
		NG.findPolytopesByPartition(partition);
		//System.out.println("Polytopes: ");
		ps.println("==================================================");
		ps.println("Number of solutions for " + n + " players and " + x + " lines: " + NG.plytps.size());
		ps.close();
		return NG.plytps.size();
	}
	public static String partition(int partee) 
	{
		return partition(partee, partee, " |").substring(3);
	}
	public static String partition(int partee, int max, String sum) 
	{
		String returnpartition = "";
		if (partee == 0)
		{
			return sum;
		}
		for (int i = Math.min(max, partee); i > 0; i--)
		{
			returnpartition += partition(partee - i, i, sum + " " + i);
		}
		return returnpartition;
	}
	public static ArrayList<ArrayList<Integer>> interpret(String _partition) 
	{
		ArrayList<ArrayList<Integer>> partition = new ArrayList<>();
		int index = -1;
		for (String sum : _partition.split(" \\| ")) 
		{
			index++;
			partition.add(new ArrayList<>());
			for (String addend: sum.split(" ")) 
			{
				partition.get(index).add(Integer.valueOf(addend));
			}
		}
		return partition;
	}
	public static ArrayList<ArrayList<Integer>> cartographer(int n, int x, NewGraph NG)
	{
		ArrayList<ArrayList<Integer>> pairs = new ArrayList<>();
		for (int i = 1; i <= n; i++)
		{
			for (int j = i; j <= n; j++)
			{
				if (i != j)
				{
					if (Math.sqrt(i + j) - Math.floor(Math.sqrt(i + j)) == 0)
					{
						ArrayList<Integer> tuple = new ArrayList<>();
						tuple.add(i);
						tuple.add(j);
						pairs.add(tuple);
						NewNode node = new NewNode(tuple, n - x);
						NG.addVertex(node);
					}
				}
			}
		}
		return pairs;
	}
	public static ArrayList<ArrayList<Integer>> _arrangements(int magnitude, ArrayList<ArrayList<Integer>> pairs, int n, int x, NewGraph NG, PrintStream ps)
	{
		if (magnitude > n - x)
		{
			return pairs;
		}
		for (int i = 3; i <= n; i++)
		{
			for (int j = 0; j < pairs.size(); j++)
			{
				if ((i != pairs.get(j).get(pairs.get(j).size() - 1)) && (i > pairs.get(j).get(pairs.get(j).size() - 1)))
				{
					if (Math.sqrt(i + pairs.get(j).get(pairs.get(j).size() - 1)) == Math.floor(Math.sqrt(i + pairs.get(j).get(pairs.get(j).size() - 1))) && pairs.get(j).size() < n - x + 1)
					{
						ArrayList<Integer> tuple = new ArrayList<>();
						for (int k = 0; k < pairs.get(j).size(); k++)
						{
							tuple.add(pairs.get(j).get(k));
						}
						tuple.add(i);
						pairs.add(tuple);
						NewNode node = new NewNode(tuple, n - x);
						NG.addVertex(node);
					}
				}
			}
		}
		magnitude++;
		_arrangements(magnitude, pairs, n, x, NG, ps);
		ps.println("Nodes: ");
		for (int i = 0; i < pairs.size(); i++)
		{
			ps.print(pairs.get(i) + "\n");
		}
		return pairs;
	}
}
